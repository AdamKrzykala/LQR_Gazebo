#!/usr/bin/env python3

import scipy.linalg as la
import matplotlib.pyplot as plt
import math
import numpy as np
import sys
import time
sys.path.append("bezier/")
import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion
try:
    import cubic_spline_planner
    from PathGenerator import *
except:
    raise


Kp = 0.4 # speed proportional gain
dt = 0.05

# LQR parameter
Q = np.eye(3)
current_time = 0.0
dt = 0.0
R = np.eye(1) * 1

show_animation = True
show_simulation = True
speed = 0.2
decel = 2
class State:

    def pose_callback(self, msg):
        self.x = msg.pose.pose.position.x
        self.y = msg.pose.pose.position.y
        robotOrientation_quat = msg.pose.pose.orientation
        orientationList = [robotOrientation_quat.x, robotOrientation_quat.y, robotOrientation_quat.z, robotOrientation_quat.w]
        (roll, pitch, yaw) = euler_from_quaternion(orientationList)
        self.yaw = yaw
        self.v = msg.twist.twist.linear.x


    def __init__(self, x=0.0, y=0.0, yaw=0.0, v=0.0):
        global dt, current_time
        self.x = x
        self.y = y
        self.yaw = yaw
        self.v = v
        if show_simulation:
            rospy.init_node('turtlebot3_lqr')
            current_time = rospy.get_time()
            rospy.Subscriber("odom", Odometry, self.pose_callback)
            self.pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
        else:
            current_time = 0.0

def update(state, a, u):
    if show_simulation:
        twist = Twist()
        twist.linear.x = state.v + a * dt
        twist.linear.y = 0.0
        twist.linear.z = 0.0
        twist.angular.x = 0.0
        twist.angular.y = 0.0
        twist.angular.z = u[1]
        state.pub.publish(twist)
    else:
        state.x = state.x + state.v * math.cos(state.yaw) * dt
        state.y = state.y + state.v * math.sin(state.yaw) * dt
        state.yaw = state.yaw + u[1] * dt
        state.v = state.v + a * dt
    return state

def stopRobot(state):
    if show_simulation:
        twist = Twist()
        twist.linear.x = 0.0
        twist.linear.y = 0.0
        twist.linear.z = 0.0
        twist.angular.x = 0.0
        twist.angular.y = 0.0
        twist.angular.z = 0.0
        state.pub.publish(twist)
    else:
        state.x = state.x + state.v * math.cos(state.yaw) * dt
        state.y = state.y + state.v * math.sin(state.yaw) * dt
        state.yaw = state.yaw + u[1] * dt
        state.v = 0.0
    return state


def PIDControl(target, current):
    a = Kp * (target - current)
    return a


def pi_2_pi(angle):
    return (angle + math.pi) % (2 * math.pi) - math.pi


def dlqr(actual_state_x, desired_state_xf, Q, R, A, B, dt):

    # We want the system to stabilize at desired_state_xf.
    x_error = actual_state_x - desired_state_xf
    if x_error[2] > 6:
        x_error[2] = x_error[2] - 2 * math.pi
    if x_error[2] < -6:
        x_error[2] = x_error[2] + 2 * math.pi
    # Solutions to discrete LQR problems are obtained using the dynamic
    # programming method.
    # The optimal solution is obtained recursively, starting at the last
    # timestep and working backwards.
    # You can play with this number
    N = 50

    # Create a list of N + 1 elements
    P = [None] * (N + 1)

    Qf = Q

    # LQR via Dynamic Programming
    P[N] = Qf

    # For i = N, ..., 1
    for i in range(N, 0, -1):
        # Discrete-time Algebraic Riccati equation to calculate the optimal
        # state cost matrix
        P[i-1] = Q + A.T @ P[i] @ A - (A.T @ P[i] @ B) @ np.linalg.pinv(
            R + B.T @ P[i] @ B) @ (B.T @ P[i] @ A)

    # Create a list of N elements
    K = [None] * N
    u = [None] * N

    # For i = 0, ..., N - 1
    for i in range(N):
        # Calculate the optimal feedback gain K
        K[i] = -np.linalg.pinv(R + B.T @ P[i+1] @ B) @ B.T @ P[i+1] @ A

        u[i] = K[i] @ x_error

    # Optimal control input is u_star
    u_star = u[N-1]

    return u_star

def lqr_steering_control(state, cx, cy, cyaw, ck, ct):
    global dt, current_time
    idxMinDistance, distanceError = calc_nearest_index(state, cx, cy, cyaw)

    currentX = state.x
    currentY = state.y
    currentYaw = state.yaw
    desiredX = cx[idxMinDistance]
    desiredY = cy[idxMinDistance]
    k = ck[idxMinDistance]

    desiredYaw = cyaw[idxMinDistance] - math.pi/(2+state.v) * distanceError


    if show_simulation:
        dt = rospy.get_time() - current_time
        current_time = rospy.get_time()
    A = np.eye((3))
    B = np.zeros((3, 2))

    B[0, 0] = np.cos(state.yaw) * dt
    B[1, 0] = np.sin(state.yaw) * dt
    B[2, 1] = dt

    desiredState = np.array([desiredX, desiredY, desiredYaw])
    currentState = np.array([currentX, currentY, currentYaw])

    u_star = dlqr(currentState, desiredState, Q, R, A,B, dt)

    return u_star, idxMinDistance, k


def calc_nearest_index(state, cx, cy, cyaw):
    dx = [state.x - icx for icx in cx]
    dy = [state.y - icy for icy in cy]

    distances = [idx ** 2 + idy ** 2 for (idx, idy) in zip(dx, dy)]

    minDistance = min(distances)

    idxMinDistance = distances.index(minDistance)

    minDistance = math.sqrt(minDistance)

    dxl = cx[idxMinDistance] - state.x
    dyl = cy[idxMinDistance] - state.y

    angle = pi_2_pi(cyaw[idxMinDistance] - math.atan2(dyl, dxl))
    if angle < 0:
        minDistance *= -1

    return idxMinDistance, minDistance


def closed_loop_prediction(cx, cy, cyaw, ck, ct, speed_profile, goal):
    global current_time, dt
    state = State(x=cx[0], y=cy[0], yaw=cyaw[0], v=0.0)
    current_time = rospy.get_time()
    T = 120.0 + current_time # max simulation time
    goal_dis = 0.3
    stop_speed = 0.00

    x = [state.x]
    y = [state.y]
    yaw = [state.yaw]
    v = [state.v]
    t = [0.0]
    currentT = 0.0
    while (1):
        optimal_u, target_ind, curvature = lqr_steering_control(
            state, cx, cy, cyaw, ck, ct)


        print("Current t: ", currentT)

        ai = PIDControl(speed_profile[target_ind] * 1/(1 + decel* abs(curvature)), state.v)

        if abs(currentT - ct[target_ind]) < 1:
            state = update(state, ai, optimal_u)
            currentT = ct[target_ind]

        if abs(state.v) <= stop_speed:
            target_ind += 1


        # check goal
        dx = state.x - goal[0]
        dy = state.y - goal[1]
        if math.hypot(dx, dy) <= goal_dis:
            print("Goal")
            stopRobot(state)
            break

        x.append(state.x)
        y.append(state.y)
        yaw.append(state.yaw)
        v.append(state.v)
        t.append(current_time)

        if target_ind % 1 == 0 and show_animation:
            plt.cla()
            # for stopping simulation with the esc key.
            plt.gcf().canvas.mpl_connect('key_release_event',
                    lambda event: [exit(0) if event.key == 'escape' else None])
            plt.plot(cx, cy, "-r", label="course")
            plt.plot(x, y, "ob", label="trajectory")
            plt.plot(cx[target_ind], cy[target_ind], "xg", label="target")
            plt.axis("equal")
            plt.grid(True)
            plt.title("speed[km/h]:" + str(round(state.v * 3.6, 2))
                      + ",target index:" + str(target_ind))
            plt.pause(0.0001)

    return t, x, y, yaw, v


def calc_speed_profile(cx, cy, cyaw, target_speed):
    speed_profile = [target_speed] * len(cx)

    direction = 1.0

    # Set stop point
    for i in range(len(cx) - 1):
        dyaw = abs(cyaw[i + 1] - cyaw[i])
        switch = math.pi / 4.0 <= dyaw < math.pi / 2.0

        if switch:
            direction *= -1

        if direction != 1.0:
            speed_profile[i] = - target_speed
        else:
            speed_profile[i] = target_speed

        if switch:
            speed_profile[i] = 0.0

    speed_profile[-1] = 0.0

    return speed_profile


def main():
    print("LQR steering control tracking start!!")
    ax = []
    ay = []
    at = []
    pathGenerator = PathGenerator()
    randomPoints = pathGenerator.generateRandomPoints(10, start_point=[[0],[0]])
    bezierList = pathGenerator.calculatePathFromPoints(randomPoints)
    path = Path(1, bezierList)
    tLIst = np.arange(0, path.getMaxLocalTime(), 0.01)

    ax1 = plt.axes()
    path.drawPath(ax1, False, False)
    plt.axis('equal')
    plt.show()
    for t in tLIst:
        point = path.evaluatePath(t)
        ax.append(point[0][0])
        ay.append(point[1][0])
        at.append(t)

    goal = [ax[-1], ay[-1]]

    cx, cy, cyaw, ck, ct, s = cubic_spline_planner.calc_spline_course(
        ax, ay, at, ds=0.1)
    target_speed = speed * 10.0 / 3.6  # simulation parameter km/h -> m/s

    sp = calc_speed_profile(cx, cy, cyaw, target_speed)

    t, x, y, yaw, v = closed_loop_prediction(cx, cy, cyaw, ck, ct, sp, goal)

    if show_animation:  # pragma: no cover
        plt.close()
        plt.subplots(1)
        # plt.plot(ax, ay, "xb", label="input")
        plt.plot(cx, cy, "-r", label="bezier")
        plt.plot(x, y, "-g", label="tracking")
        plt.grid(True)
        plt.axis("equal")
        plt.xlabel("x[m]")
        plt.ylabel("y[m]")
        plt.legend()

        plt.subplots(1)
        plt.plot(s, [np.rad2deg(iyaw) for iyaw in cyaw], "-r", label="yaw")
        plt.grid(True)
        plt.legend()
        plt.xlabel("line length[m]")
        plt.ylabel("yaw angle[deg]")

        plt.subplots(1)
        plt.plot(s, ck, "-r", label="curvature")
        plt.grid(True)
        plt.legend()
        plt.xlabel("line length[m]")
        plt.ylabel("curvature [1/m]")

        plt.show()


if __name__ == '__main__':
    main()
